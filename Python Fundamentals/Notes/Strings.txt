STRINGS

# Strings
- Strings can be written with both single and double quotations. ("", '')
- Strings can be directly printed or can be assigned to a variable.
- Quotes can be used inside the string as long as it does not matches the surrounding quotes to the string
- Example: 
		print("He said, 'I am vengeance' ")
		print('He said, "I am vengeance"')

NOTE: OUTPUTS CAN BE SEPERATED INTO NEWLINE BY USING THIS COMMAND
g = "Stellar Blade"
h = 'Blacl Wall'
i = str('Kusunagi')
print(g, h, i, sep="\n")

# Multi Line strings
- We can assign multi line strings using 3 single or double quotes.
- In the result, the line breaks are inserted at the same position as in the code.


# Arrays
- In python there are no character data types, a single character is considered as a string with length 1.
- Square brackets can be used to access the elements of the string.
- Example:
		a = "Darth Vader"
		print(a[1])


# Looping through String
- Since strings are arrays, we can loop through the characters in a string, with a for loop.
- Example:
		print("\nLooping through String:\n")
		for i in a:
  		print(i)

# String Length
- Used to return the length of the string
- len() command is used for this.


# Check String
- Similar to "grep" command in Linux, the "in" command is used to find if a certain phrase or character is present in a string.
- It is best used in with the if statement.
- Similar to checking if there IS a phrase in the string we also have a command to check if there IS NOT a certain character or phrase in the string.
- This is done using "not in" command, also best used with if statements.
- Example:
			print("Checking if there is 'illusion' in the multilinestring or not: ")
			if "illusion" in multilinestring:
    				print("Yes, 'illusion' is present in multilinestring")
			else:
    				print("No, 'illusion' is not present in multilinestring")



# Slicing
- Slicing is used to return the range of characters from a string.
- The range is defined in square brackets with colon. [2:5] The numbers inside the bracket
- Syntax:

		x = "Square Enix"
		print(x[2:5])		# Prints from index 2 to 4 (5 is non inclusive)
		print(x[:5])		# Prints from start to 4th index
		print(x[4:])		# Prints from 4th to last index
		print(x[-5:-2])		# Prints from last 5th index to last 2 index



MODIFY STRINGS

# Upper Case
- converts the string into upper case by using command : variable.upper()

# Lower Case
- converts the string into lower case by using command : variable.lower()

# Remove Whitespaces
- Removes whitespaces before or/and after the string by command : variable.strip()

# Replace String
- Replaces the existing string with another string value by command : variable.replace("Text")

# Split String
- Returns a list where the text between the specified separator becomes the list items
- command : variable.split("sperator") 


NOTE: FOR USING MULTIPLE OPERATIONS ON A STRING USE THIS SYNTAX
print(txt.strip().upper())


# Concatenation
- Used to two different strings using "+" operator
- Used to add string in output.
- Example:

		j = "Johnny"
		s = "Silverhand"
		js = j + s
		print('j = "Johnny"')
		print('s = "Silverhand"')
		print(js)


# Format function
- Advanced way of combining strings with different variables of different data types.
- To specify a string as an f-string, simply put an f in front of the string literal, and add curly brackets {} as placeholders for variables and other operations.
- Example:
	
		age = 36
		txt = "My name is John, and I am {}"
		print(txt.format(age))


# Escape Characters
- Used to add values or commands that are illegal to insert in a string

\'	Single Quote	
\\	Backslash	
\n	New Line	
\r	Carriage Return	
\t	Tab	
\b	Backspace	
\f	Form Feed	
\ooo	Octal value	
\xhh	Hex value


# String Methods

Method		Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()		Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()		Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()		Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()		Joins the elements of an iterable to the end of the string
ljust()		Returns a left justified version of the string
lower()		Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()		Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()		Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()		Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()		Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()		Converts the first character of each word to upper case
translate()	Returns a translated string
upper()		Converts a string into upper case
zfill()		Fills the string with a specified number of 0 values at the beginning
