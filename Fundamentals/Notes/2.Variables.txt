VARIABLES

NOTE: STRING VARIABLES CAN BE DECLARED USING SINGLE OR DOUBLE QUOTES.
      VARIABLE NAMES ARE CASE SENSITIVE

# Creating Variables
- Python has no command for declaring variables. A variable is created the moment you assign value to it.
- Variables do not need to be declared with any particular data type and can even change after they have been set.
- Example:	x = 5
		y = Zarbon
		print(x)
		print(y)


# Casting
- Casting is similar to assigning data types to variables.
- Example:
		a = int(34)
		s = str(23.56)



# Get the data type of variable
- This returns the data type of the variable.
- type() function is used for this
- Example:
		t = 25
		y = "Malice"
		print(type(t))
		print(type(y))


# Variable Names
- Variable names cannot be any python keywords.
- Must start with (_) or alphabets and the name must always be alphanumeric.
- Variable names are case sensitive.

# Multi Name Variable Names
- There are mainly three types of way to write multi name variables
	Camel Case	-> pythonVariableName
	Pascal Case	-> PythonVariableName
	Snake Case	-> python_variable_name


# Multiple Values and Multiple Variables
- Python lets you assign multiple values to multiple variables.
	x, y, z = "Red", "Blue", "Green"
- Python lets you assign same values to multiple variables.
	x = "Pink"
	y = "Pink"
	z = "Pink"


# Unpacking
- Unpacking allows you to extract tuples or lists into variables.
	Cyberware = ["Cyberdeck", "Berserk", "Sandevastan"]
	c, b, s = Cyberware
- NOTE: THE NUMBER OF VARIABLES AND NUMBER OF VALUES FROM LIST OR TUPLE MUST MATCH


# Concatenation with + Operator
- When using the output function we can concatenate variable outputs
- Example
	a = "Aston "
	b = "Broche "
	c = "Cambrel "	
	print(a + b + c)
- However there are some restriction with this. You cannot concatenate Numeric Values with string.


# Global Variables
- Global variables are created outside of a function. and can be used everywhere by everyone both inside and outside the function.
- Example:
	
	v = "Corpo Shit"
	def samurai():
    		print("Burn Down " + v)
	samurai()
- We can create a local variable within the function with the same name but it will only be usable inside the function.
- This can be Changed using the "global" Keyword. This makes it so that the variable is usable outside the function also
- Syntax
		global variable_name

		variable_name = value










