IF ELSE

# Conditions and If statements
- Python supports the usual logical conditions from mathematics:
- Equals: a == b
- Not Equals: a != b
- Less than: a < b
- Less than or equal to: a <= b
- Greater than: a > b
- Greater than or equal to: a >= b

- Simple example:
	a = 33
	b = 35
	if a < b:
		print("a is smaller than b")


# Indentation
- Python relies on indentation for If Else syntax. Unlike other programming languages that rely on brackets.
- Python uses white spaces and tabs to separate nesting and other code.

# Else
- When the If condition is not true the program executes the Else statement.


# Elif
- It directs to the program that, "if the previous conditions were not true, then try this condition."
- Example:
	a = 33
	b = 35
	if a < b:
		print("a is smaller than b")
	elif a == b:
		print("a and b are equal")
	else:
		print("a is greater than b")



# Short hand if
- If you have only one statement to execute, you can put it in the same line of the if statement.
- Example:
	if a > b : print("a is greater than b")
	

# Shorthand if else:
- Same as before you can write both statements in one line.
- In If else shorthand the print statement for if is written before if
- Example:
	a = 2
	b = 330
	print("A") if a > b else print("B")


NOTE: This technique is known as Ternary Operators, or Conditional Expressions.

- You can have multiple if statements in one line.
- Example:
	a = 330
	b = 330
	print("A") if a > b else print("=") if a == b else print("B")
	
	
# AND
- And Operator is used to check if multiple statements are true.
- Example:
	a = 200
	b = 33
	c = 500
	if a > b and c > a:
  		print("Both conditions are True")
  		

# OR
- Or operator is used to check if one of the statements is true.
- Example:
	a = 200
	b = 33
	c = 500
	if a > b or a > c:
		print("At least one of the conditions is True")


# NOT
- The not keyword is a logical operator, and is used to reverse the result of the conditional statement
- Example:
	a = 33
	b = 200
	if not a > b:
  		print("a is NOT greater than b")
  		

# Nested If
- You can have if statements inside if statements, this is called nested if statements.
- Example:
	x = 41

	if x > 10:
		print("Above ten,")
		if x > 20:
			print("and also above 20!")
  		else:
  			print("but not above 20.")



# The pass statement
- if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.
- Example:
	x = int(input("Enter a number: "))
	if x < 0:
    		pass  # Negative numbers are ignored for now
	else:
    		print("Non-negative number:", x)
